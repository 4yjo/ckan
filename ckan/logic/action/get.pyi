from typing import Dict, List, Optional, Tuple, Union
from ckan.logic import Context, DataDict

def site_read(context: Context, data_dict: Optional[DataDict]) -> bool: ...
def package_list(context: Context, data_dict: DataDict) -> List[str]: ...
def current_package_list_with_resources(
    context: Context, data_dict: DataDict
) -> List[Dict]: ...
def member_list(
    context: Context, data_dict: Optional[DataDict]
) -> List[Tuple]: ...
def package_collaborator_list(
    context: Context, data_dict: DataDict
) -> List[Dict]: ...
def package_collaborator_list_for_user(
    context: Context, data_dict: DataDict
) -> List[Dict]: ...
def group_list(context: Context, data_dict: DataDict) -> List[Dict]: ...
def organization_list(context: Context, data_dict: DataDict) -> List[Dict]: ...
def group_list_authz(context: Context, data_dict: DataDict) -> List[Dict]: ...
def organization_list_for_user(
    context: Context, data_dict: DataDict
) -> List[Dict]: ...
def license_list(context: Context, data_dict: DataDict) -> List[Dict]: ...
def tag_list(
    context: Context, data_dict: DataDict
) -> Union[List[Dict], List[str]]: ...
def user_list(
    context: Context, data_dict: DataDict
) -> Union[List[Dict], List[str]]: ...
def package_relationships_list(
    context: Context, data_dict: DataDict
) -> List[Dict]: ...
def package_show(context: Context, data_dict: DataDict) -> Dict: ...
def resource_show(context: Context, data_dict: DataDict) -> Dict: ...
def resource_view_show(context: Context, data_dict: DataDict) -> Dict: ...
def resource_view_list(
    context: Context, data_dict: DataDict
) -> List[Dict]: ...
def group_show(context: Context, data_dict: DataDict) -> Dict: ...
def organization_show(context: Context, data_dict: DataDict) -> Dict: ...
def group_package_show(
    context: Context, data_dict: DataDict
) -> List[Dict]: ...
def tag_show(context: Context, data_dict: DataDict) -> Dict: ...
def user_show(context: Context, data_dict: DataDict) -> Dict: ...
def package_autocomplete(
    context: Context, data_dict: DataDict
) -> List[Dict]: ...
def format_autocomplete(
    context: Context, data_dict: DataDict
) -> List[str]: ...
def user_autocomplete(context: Context, data_dict: DataDict) -> List[Dict]: ...
def group_autocomplete(
    context: Context, data_dict: DataDict
) -> List[Dict]: ...
def organization_autocomplete(
    context: Context, data_dict: DataDict
) -> List[Dict]: ...
def package_search(context: Context, data_dict: DataDict) -> List[Dict]: ...
def resource_search(context: Context, data_dict: DataDict) -> Dict: ...
def tag_search(context: Context, data_dict: DataDict) -> Dict: ...
def tag_autocomplete(context: Context, data_dict: DataDict) -> List[str]: ...
def task_status_show(context: Context, data_dict: DataDict) -> Dict: ...
def term_translation_show(
    context: Context, data_dict: DataDict
) -> List[Dict]: ...
def get_site_user(context: Context, data_dict: DataDict) -> Dict: ...
def status_show(context: Context, data_dict: DataDict) -> Dict: ...
def vocabulary_list(context: Context, data_dict: DataDict) -> List[Dict]: ...
def vocabulary_show(context: Context, data_dict: DataDict) -> Dict: ...
def user_activity_list(
    context: Context, data_dict: DataDict
) -> List[Dict]: ...
def package_activity_list(
    context: Context, data_dict: DataDict
) -> List[Dict]: ...
def group_activity_list(
    context: Context, data_dict: DataDict
) -> List[Dict]: ...
def organization_activity_list(
    context: Context, data_dict: DataDict
) -> List[Dict]: ...
def recently_changed_packages_activity_list(
    context: Context, data_dict: DataDict
) -> List[Dict]: ...
def user_follower_count(context: Context, data_dict: DataDict) -> int: ...
def dataset_follower_count(context: Context, data_dict: DataDict) -> int: ...
def group_follower_count(context: Context, data_dict: DataDict) -> int: ...
def organization_follower_count(
    context: Context, data_dict: DataDict
) -> int: ...
def user_follower_list(
    context: Context, data_dict: DataDict
) -> List[Dict]: ...
def dataset_follower_list(
    context: Context, data_dict: DataDict
) -> List[Dict]: ...
def group_follower_list(
    context: Context, data_dict: DataDict
) -> List[Dict]: ...
def organization_follower_list(
    context: Context, data_dict: DataDict
) -> List[Dict]: ...
def am_following_user(context: Context, data_dict: DataDict) -> bool: ...
def am_following_dataset(context: Context, data_dict: DataDict) -> bool: ...
def am_following_group(context: Context, data_dict: DataDict) -> bool: ...
def followee_count(context: Context, data_dict: DataDict) -> int: ...
def user_followee_count(context: Context, data_dict: DataDict) -> int: ...
def dataset_followee_count(context: Context, data_dict: DataDict) -> int: ...
def group_followee_count(context: Context, data_dict: DataDict) -> int: ...
def followee_list(context: Context, data_dict: DataDict) -> List[Dict]: ...
def user_followee_list(
    context: Context, data_dict: DataDict
) -> List[Dict]: ...
def dataset_followee_list(
    context: Context, data_dict: DataDict
) -> List[Dict]: ...
def group_followee_list(
    context: Context, data_dict: DataDict
) -> List[Dict]: ...
def organization_followee_list(
    context: Context, data_dict: DataDict
) -> List[Dict]: ...
def dashboard_activity_list(
    context: Context, data_dict: DataDict
) -> List[Dict]: ...
def dashboard_new_activities_count(
    context: Context, data_dict: DataDict
) -> int: ...
def activity_show(context: Context, data_dict: DataDict) -> Dict: ...
def activity_data_show(context: Context, data_dict: DataDict) -> Dict: ...
def activity_diff(context: Context, data_dict: DataDict) -> Dict: ...
def member_roles_list(context: Context, data_dict: DataDict) -> List[Dict]: ...
def help_show(context: Context, data_dict: DataDict) -> List[Dict]: ...
def config_option_show(context: Context, data_dict: DataDict) -> Any: ...
def config_option_list(context: Context, data_dict: DataDict) -> List[str]: ...
def job_list(context: Context, data_dict: DataDict) -> List[Dict]: ...
def job_show(context: Context, data_dict: DataDict) -> Dict: ...
def api_token_list(context: Context, data_dict: DataDict) -> List[Dict]: ...
