"""
This type stub file was generated by pyright.
"""

def validator_args(fn):
    u'''collect validator names from argument names
    and pass them to wrapped function'''
    ...

@validator_args
def default_resource_schema(ignore_empty, unicode_safe, ignore, ignore_missing, remove_whitespace, if_empty_guess_format, clean_format, isodate, int_validator, extras_valid_json, keep_extras):
    ...

@validator_args
def default_update_resource_schema(ignore):
    ...

@validator_args
def default_tags_schema(not_missing, not_empty, unicode_safe, tag_length_validator, tag_name_validator, ignore_missing, vocabulary_id_exists, ignore):
    ...

@validator_args
def default_create_tag_schema(not_missing, not_empty, unicode_safe, vocabulary_id_exists, tag_not_in_vocabulary, empty):
    ...

@validator_args
def default_create_package_schema(duplicate_extras_key, ignore, empty_if_not_sysadmin, ignore_missing, unicode_safe, package_id_does_not_exist, not_empty, name_validator, package_name_validator, if_empty_same_as, email_validator, package_version_validator, ignore_not_package_admin, boolean_validator, datasets_with_no_organization_cannot_be_private, empty, tag_string_convert, owner_org_validator, no_http):
    ...

@validator_args
def default_update_package_schema(ignore_missing, package_id_not_changed, name_validator, package_name_validator, unicode_safe, owner_org_validator):
    ...

@validator_args
def default_show_package_schema(keep_extras, ignore_missing, clean_format, unicode_safe, not_empty):
    ...

@validator_args
def default_group_schema(ignore_missing, unicode_safe, ignore, not_empty, name_validator, group_name_validator, package_id_or_name_exists, no_loops_in_hierarchy, ignore_not_group_admin):
    ...

@validator_args
def group_form_schema(not_empty, unicode_safe, ignore_missing, ignore):
    ...

@validator_args
def default_update_group_schema(ignore_missing, group_name_validator, unicode_safe):
    ...

@validator_args
def default_show_group_schema(keep_extras, ignore_missing):
    ...

@validator_args
def default_extras_schema(ignore, not_empty, extra_key_not_in_root_schema, unicode_safe, not_missing, ignore_missing):
    ...

@validator_args
def default_relationship_schema(ignore_missing, unicode_safe, not_empty, one_of, ignore):
    ...

@validator_args
def default_create_relationship_schema(empty, not_empty, unicode_safe, package_id_or_name_exists):
    ...

@validator_args
def default_update_relationship_schema(ignore_missing, package_id_not_changed):
    ...

@validator_args
def default_user_schema(ignore_missing, unicode_safe, name_validator, user_name_validator, user_password_validator, user_password_not_empty, email_is_unique, ignore_not_sysadmin, not_empty, email_validator, user_about_validator, ignore, boolean_validator, json_object):
    ...

@validator_args
def user_new_form_schema(unicode_safe, user_both_passwords_entered, user_password_validator, user_passwords_match, email_is_unique):
    ...

@validator_args
def user_edit_form_schema(ignore_missing, unicode_safe, user_both_passwords_entered, user_password_validator, user_passwords_match, email_is_unique):
    ...

@validator_args
def default_update_user_schema(ignore_missing, name_validator, user_name_validator, unicode_safe, user_password_validator, email_is_unique, not_empty, email_validator):
    ...

@validator_args
def default_generate_apikey_user_schema(not_empty, unicode_safe):
    ...

@validator_args
def default_user_invite_schema(not_empty, unicode_safe):
    ...

@validator_args
def default_task_status_schema(ignore, not_empty, unicode_safe, ignore_missing):
    ...

@validator_args
def default_vocabulary_schema(ignore_missing, unicode_safe, vocabulary_id_exists, not_empty, vocabulary_name_validator):
    ...

@validator_args
def default_create_vocabulary_schema(empty):
    ...

@validator_args
def default_update_vocabulary_schema(ignore_missing, vocabulary_id_not_changed, vocabulary_name_validator):
    ...

@validator_args
def default_create_activity_schema(ignore, not_missing, not_empty, unicode_safe, convert_user_name_or_id_to_id, object_id_validator, activity_type_exists, ignore_empty, ignore_missing):
    ...

@validator_args
def default_follow_user_schema(not_missing, not_empty, unicode_safe, convert_user_name_or_id_to_id, ignore_missing):
    ...

@validator_args
def default_follow_dataset_schema(not_missing, not_empty, unicode_safe, convert_package_name_or_id_to_id):
    ...

@validator_args
def member_schema(not_missing, group_id_or_name_exists, unicode_safe, user_id_or_name_exists, role_exists):
    ...

@validator_args
def default_follow_group_schema(not_missing, not_empty, unicode_safe, convert_group_name_or_id_to_id):
    ...

@validator_args
def default_package_list_schema(ignore_missing, natural_number_validator, is_positive_integer):
    ...

@validator_args
def default_pagination_schema(ignore_missing, natural_number_validator):
    ...

@validator_args
def default_dashboard_activity_list_schema(configured_default, natural_number_validator, limit_to_configured_maximum):
    ...

@validator_args
def default_activity_list_schema(not_missing, unicode_safe, configured_default, natural_number_validator, limit_to_configured_maximum, ignore_missing, boolean_validator, ignore_not_sysadmin):
    ...

@validator_args
def default_autocomplete_schema(not_missing, unicode_safe, ignore_missing, natural_number_validator):
    ...

@validator_args
def default_package_search_schema(ignore_missing, unicode_safe, list_of_strings, natural_number_validator, int_validator, convert_to_json_if_string, convert_to_list_if_string, limit_to_configured_maximum, default):
    ...

@validator_args
def default_resource_search_schema(ignore_missing, unicode_safe, natural_number_validator):
    ...

def create_schema_for_required_keys(keys):
    ''' helper function that creates a schema definition where
    each key from keys is validated against ``not_missing``.
    '''
    ...

def default_create_resource_view_schema(resource_view):
    ...

@validator_args
def default_create_resource_view_schema_unfiltered(not_empty, resource_id_exists, unicode_safe, ignore_missing, empty):
    ...

@validator_args
def default_create_resource_view_schema_filtered(ignore_missing, convert_to_list_if_string, filter_fields_and_values_should_have_same_length, filter_fields_and_values_exist_and_are_valid):
    ...

def default_update_resource_view_schema(resource_view):
    ...

@validator_args
def default_update_resource_view_schema_changes(not_missing, not_empty, unicode_safe, resource_id_exists, ignore, ignore_missing):
    ...

@validator_args
def default_update_configuration_schema(unicode_safe, is_positive_integer, ignore_missing):
    ...

def update_configuration_schema():
    '''
    Returns the schema for the config options that can be edited during runtime

    By default these are the keys of the
    :py:func:`ckan.logic.schema.default_update_configuration_schema`.
    Extensions can add or remove keys from this schema using the
    :py:meth:`ckan.plugins.interfaces.IConfigurer.update_config_schema`
    method.

    These configuration options can be edited during runtime via the web
    interface or using
    the :py:func:`ckan.logic.action.update.config_option_update` API call.

    :returns: a dictionary mapping runtime-editable configuration option keys
      to lists of validator and converter functions to be applied to those
      keys
    :rtype: dictionary
    '''
    ...

@validator_args
def job_list_schema(ignore_missing, list_of_strings):
    ...

@validator_args
def job_clear_schema(ignore_missing, list_of_strings):
    ...

@validator_args
def default_create_api_token_schema(not_empty, unicode_safe, ignore_missing, json_object, ignore_not_sysadmin):
    ...

@validator_args
def package_revise_schema(ignore_missing, list_of_strings, collect_prefix_validate, json_or_string, json_list_or_string, dict_only):
    ...

