"""
This type stub file was generated by pyright.
"""

from typing import (
    Any,
    Callable,
    Container,
    Dict,
    List,
    Literal,
    Optional,
    Tuple,
    TypeVar,
    Union,
)
from ckan.types import ErrorDict, Context
import ckan.model as model
import ckan.authz as authz
import ckan.lib.navl.dictization_functions as df
from werkzeug.datastructures import MultiDict
import ckan.plugins as p
from ckan.common import _

Decorated = TypeVar("Decorated")


class NameConflict(Exception): ...
class UsernamePasswordError(Exception): ...

class ActionError(Exception):
    message: str
    def __init__(self, message: str = ...): ...

class NotFound(ActionError): ...

class NotAuthorized(ActionError): ...

class ValidationError(ActionError):
    error_dict: ErrorDict
    error_summary: Dict[str, str]
    def __init__(
        self,
        error_dict: ErrorDict,
        error_summary: Optional[Dict[str, str]] = ...,
        extra_msg: Optional[str] = ...,
    ) -> None: ...

def parse_params(
    params: MultiDict, ignore_keys: Optional[Container] = ...
) -> Dict[str, Union[str, List[str]]]: ...
def clean_dict(data_dict: Dict[str, Any]) -> Dict[str, Any]: ...
def tuplize_dict(data_dict: Dict[str, Any]) -> Dict[Tuple, Any]: ...
def untuplize_dict(tuplized_dict: Dict[Tuple, Any]) -> Dict[str, Any]: ...
def flatten_to_string_key(dict: Dict) -> Dict[str, Any]: ...
def check_access(
    action: str, context: Context, data_dict: Optional[Dict] = ...
) -> Literal[True]: ...
def clear_actions_cache() -> None: ...
def chained_action(func: Callable) -> Callable: ...
def get_action(action: str) -> Callable: ...
def get_or_bust(
    data_dict: Dict, keys: Union[str, List[str]]
) -> Union[Any, Tuple]: ...
def validate(
    schema_func: Callable[[], Dict], can_skip_validator: bool = ...
) -> Callable[[Callable], Callable]: ...
def side_effect_free(action: Decorated) -> Decorated: ...
def auth_sysadmins_check(action: Decorated) -> Decorated: ...
def auth_audit_exempt(action: Decorated) -> Decorated: ...
def auth_allow_anonymous_access(action: Decorated) -> Decorated: ...
def auth_disallow_anonymous_access(action: Decorated) -> Decorated: ...
def chained_auth_function(func: Decorated) -> Decorated: ...

class UnknownValidator(Exception): ...

def clear_validators_cache() -> None: ...
def get_validator(validator: str) -> Callable: ...
def model_name_to_class(model_module: Any, model_name: str) -> Any: ...
