"""
This type stub file was generated by pyright.
"""

import flask
import six
from collections import MutableMapping
from werkzeug.local import Local, LocalProxy

if six.PY2:
    ...
current_app = flask.current_app
def is_flask_request():
    u'''
    A centralized way to determine whether we are in the context of a
    request being served by Flask or Pylons
    '''
    ...

def streaming_response(data, mimetype=..., with_context=...):
    ...

def ugettext(*args, **kwargs):
    ...

_ = ugettext
def ungettext(*args, **kwargs):
    ...

class CKANConfig(MutableMapping):
    u'''Main CKAN configuration object

    This is a dict-like object that also proxies any changes to the
    Flask and Pylons configuration objects.

    The actual `config` instance in this module is initialized in the
    `load_environment` method with the values of the ini file or env vars.

    '''
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def __getitem__(self, key):
        ...
    
    def __iter__(self):
        ...
    
    def __len__(self):
        ...
    
    def __repr__(self):
        ...
    
    def copy(self):
        ...
    
    def clear(self):
        ...
    
    def __setitem__(self, key, value):
        ...
    
    def __delitem__(self, key):
        ...
    


class CKANRequest(LocalProxy):
    u'''Common request object

    This is just a wrapper around LocalProxy so we can handle some special
    cases for backwards compatibility.

    LocalProxy will forward to Flask or Pylons own request objects depending
    on the output of `_get_request` (which essentially calls
    `is_flask_request`) and at the same time provide all objects methods to be
    able to interact with them transparently.
    '''
    @property
    def params(self):
        u''' Special case as Pylons' request.params is used all over the place.
        All new code meant to be run just in Flask (eg views) should always
        use request.args
        '''
        ...
    


local = Local()
config = local.config = CKANConfig()
request = CKANRequest(_get_request)
g = c = LocalProxy(_get_c)
session = LocalProxy(_get_session)
truthy = frozenset([u'true', u'yes', u'on', u'y', u't', u'1'])
falsy = frozenset([u'false', u'no', u'off', u'n', u'f', u'0'])
def asbool(obj):
    ...

def asint(obj):
    ...

def aslist(obj, sep=..., strip=...):
    ...

