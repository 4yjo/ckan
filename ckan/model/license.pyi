from typing import Any, Dict, Iterable, List, Optional, Sized, Tuple

class License(object):
    def __init__(self, data: Dict) -> None: ...
    def __getattr__(self, name: str) -> Any: ...
    def isopen(self) -> bool: ...

class LicenseRegister(object):
    licenses: List[License]
    def __init__(self) -> None: ...
    def load_licenses(self, license_url: str) -> None: ...
    def __getitem__(self, key: str, default: Any = ...) -> License: ...
    def get(self, key: str, default: Optional[Any] = ...): ...
    def keys(self) -> List[str]: ...
    def values(self) -> List[License]: ...
    def items(self) -> List[Tuple[str, License]]: ...

class DefaultLicense(dict):
    domain_content: bool = ...
    domain_data: bool = ...
    domain_software: bool = ...
    family: str = ...
    is_generic: bool = ...
    od_conformance: str = ...
    osd_conformance: str = ...
    maintainer: str = ...
    status: str = ...
    url: str = ...
    title: str = ...
    id: str = ...
    keys: List[str] = ...
    def __getitem__(self, key: str) -> Any: ...
    def copy(self) -> Dict: ...

class LicenseNotSpecified(DefaultLicense): ...
class LicenseOpenDataCommonsPDDL(DefaultLicense): ...
class LicenseOpenDataCommonsOpenDatabase(DefaultLicense): ...
class LicenseOpenDataAttribution(DefaultLicense): ...
class LicenseCreativeCommonsZero(DefaultLicense): ...
class LicenseCreativeCommonsAttribution(DefaultLicense): ...
class LicenseCreativeCommonsAttributionShareAlike(DefaultLicense): ...
class LicenseGNUFreeDocument(DefaultLicense): ...
class LicenseOtherOpen(DefaultLicense): ...
class LicenseOtherPublicDomain(DefaultLicense): ...
class LicenseOtherAttribution(DefaultLicense): ...
class LicenseOpenGovernment(DefaultLicense): ...
class LicenseCreativeCommonsNonCommercial(DefaultLicense): ...
class LicenseOtherNonCommercial(DefaultLicense): ...
class LicenseOtherClosed(DefaultLicense): ...
