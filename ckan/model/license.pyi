"""
This type stub file was generated by pyright.
"""

import ckan.lib.maintain as maintain

log = __import__('logging').getLogger(__name__)
class License(object):
    """Domain object for a license."""
    def __init__(self, data) -> None:
        ...
    
    def __getattr__(self, name):
        ...
    
    @maintain.deprecated("License.__getitem__() is deprecated and will be " "removed in a future version of CKAN. Instead, " "please use attribute access.")
    def __getitem__(self, key):
        '''NB This method is deprecated and will be removed in a future version
        of CKAN. Instead, please use attribute access.
        '''
        ...
    
    def isopen(self):
        ...
    
    @maintain.deprecated("License.as_dict() is deprecated and will be " "removed in a future version of CKAN. Instead, " "please use attribute access.")
    def as_dict(self):
        '''NB This method is deprecated and will be removed in a future version
        of CKAN. Instead, please use attribute access.
        '''
        ...
    


class LicenseRegister(object):
    """Dictionary-like interface to a group of licenses."""
    def __init__(self) -> None:
        ...
    
    def load_licenses(self, license_url):
        ...
    
    def __getitem__(self, key, default=...):
        ...
    
    def get(self, key, default=...):
        ...
    
    def keys(self):
        ...
    
    def values(self):
        ...
    
    def items(self):
        ...
    
    def __iter__(self):
        ...
    
    def __len__(self):
        ...
    


class DefaultLicense(dict):
    ''' The license was a dict but this did not allow translation of the
    title.  This is a slightly changed dict that allows us to have the title
    as a property and so translated. '''
    domain_content = ...
    domain_data = ...
    domain_software = ...
    family = ...
    is_generic = ...
    od_conformance = ...
    osd_conformance = ...
    maintainer = ...
    status = ...
    url = ...
    title = ...
    id = ...
    keys = ...
    def __getitem__(self, key):
        ''' behave like a dict but get from attributes '''
        ...
    
    def copy(self):
        ''' create a dict of the license used by the licenses api '''
        ...
    


class LicenseNotSpecified(DefaultLicense):
    id = ...
    is_generic = ...
    @property
    def title(self):
        ...
    


class LicenseOpenDataCommonsPDDL(DefaultLicense):
    domain_data = ...
    id = ...
    od_conformance = ...
    url = ...
    @property
    def title(self):
        ...
    


class LicenseOpenDataCommonsOpenDatabase(DefaultLicense):
    domain_data = ...
    id = ...
    od_conformance = ...
    url = ...
    @property
    def title(self):
        ...
    


class LicenseOpenDataAttribution(DefaultLicense):
    domain_data = ...
    id = ...
    od_conformance = ...
    url = ...
    @property
    def title(self):
        ...
    


class LicenseCreativeCommonsZero(DefaultLicense):
    domain_content = ...
    domain_data = ...
    id = ...
    od_conformance = ...
    url = ...
    @property
    def title(self):
        ...
    


class LicenseCreativeCommonsAttribution(DefaultLicense):
    id = ...
    od_conformance = ...
    url = ...
    @property
    def title(self):
        ...
    


class LicenseCreativeCommonsAttributionShareAlike(DefaultLicense):
    domain_content = ...
    id = ...
    od_conformance = ...
    url = ...
    @property
    def title(self):
        ...
    


class LicenseGNUFreeDocument(DefaultLicense):
    domain_content = ...
    id = ...
    od_conformance = ...
    url = ...
    @property
    def title(self):
        ...
    


class LicenseOtherOpen(DefaultLicense):
    domain_content = ...
    id = ...
    is_generic = ...
    od_conformance = ...
    @property
    def title(self):
        ...
    


class LicenseOtherPublicDomain(DefaultLicense):
    domain_content = ...
    id = ...
    is_generic = ...
    od_conformance = ...
    @property
    def title(self):
        ...
    


class LicenseOtherAttribution(DefaultLicense):
    domain_content = ...
    id = ...
    is_generic = ...
    od_conformance = ...
    @property
    def title(self):
        ...
    


class LicenseOpenGovernment(DefaultLicense):
    domain_content = ...
    id = ...
    od_conformance = ...
    url = ...
    @property
    def title(self):
        ...
    


class LicenseCreativeCommonsNonCommercial(DefaultLicense):
    id = ...
    url = ...
    @property
    def title(self):
        ...
    


class LicenseOtherNonCommercial(DefaultLicense):
    id = ...
    is_generic = ...
    @property
    def title(self):
        ...
    


class LicenseOtherClosed(DefaultLicense):
    id = ...
    is_generic = ...
    @property
    def title(self):
        ...
    


