from typing import Any, Callable, Optional
from sqlalchemy.orm.interfaces import MapperExtension
from sqlalchemy.orm.session import SessionExtension

class ObserverNotifier(object):

    observers: Optional[Any]

class PluginMapperExtension(MapperExtension):  # type: ignore
    def notify_observers(self, func: Callable[[Any], None]) -> None: ...
    def before_insert(
        self, mapper: Any, connection: Any, instance: Any
    ) -> None: ...
    def before_update(
        self, mapper: Any, connection: Any, instance: Any
    ) -> None: ...
    def before_delete(
        self, mapper: Any, connection: Any, instance: Any
    ) -> None: ...
    def after_insert(
        self, mapper: Any, connection: Any, instance: Any
    ) -> None: ...
    def after_update(
        self, mapper: Any, connection: Any, instance: Any
    ) -> None: ...
    def after_delete(
        self, mapper: Any, connection: Any, instance: Any
    ) -> None: ...

class PluginSessionExtension(SessionExtension):
    def notify_observers(self, func: Callable[[Any], None]) -> None: ...
    def after_begin(
        self, session: Any, transaction: Any, connection: Any
    ) -> None: ...
    def before_flush(
        self, session: Any, flush_context: Any, instances: Any
    ) -> None: ...
    def after_flush(self, session: Any, flush_context: Any) -> None: ...
    def before_commit(self, session: Any) -> None: ...
    def after_commit(self, session: Any) -> None: ...
    def after_rollback(self, session: Any) -> None: ...
