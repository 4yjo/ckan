"""
This type stub file was generated by pyright.
"""

import datetime
from sqlalchemy import Column, ForeignKey, Table, types
from ckan.model import core, domain_object, meta, types as _types

CORE_RESOURCE_COLUMNS = [
    "url",
    "format",
    "description",
    "hash",
    "name",
    "resource_type",
    "mimetype",
    "mimetype_inner",
    "size",
    "created",
    "last_modified",
    "metadata_modified",
    "cache_url",
    "cache_last_updated",
    "url_type",
]
resource_table = Table(
    "resource",
    meta.metadata,
    Column(
        "id", types.UnicodeText, primary_key=True, default=_types.make_uuid
    ),
    Column("package_id", types.UnicodeText, ForeignKey("package.id")),
    Column(
        "url", types.UnicodeText, nullable=False, doc="remove_if_not_provided"
    ),
    Column("format", types.UnicodeText),
    Column("description", types.UnicodeText, doc="remove_if_not_provided"),
    Column("hash", types.UnicodeText),
    Column("position", types.Integer),
    Column("name", types.UnicodeText),
    Column("resource_type", types.UnicodeText, doc="remove_if_not_provided"),
    Column("mimetype", types.UnicodeText, doc="remove_if_not_provided"),
    Column("mimetype_inner", types.UnicodeText, doc="remove_if_not_provided"),
    Column("size", types.BigInteger),
    Column("created", types.DateTime, default=datetime.datetime.utcnow),
    Column("last_modified", types.DateTime),
    Column(
        "metadata_modified", types.DateTime, default=datetime.datetime.utcnow
    ),
    Column("cache_url", types.UnicodeText),
    Column("cache_last_updated", types.DateTime),
    Column("url_type", types.UnicodeText),
    Column("extras", _types.JsonDictType),
    Column("state", types.UnicodeText, default=core.State.ACTIVE),
)

class Resource(core.StatefulObjectMixin, domain_object.DomainObject):
    extra_columns = ...
    def __init__(
        self,
        url=...,
        format=...,
        description=...,
        hash=...,
        extras=...,
        package_id=...,
        **kwargs
    ) -> None: ...
    def as_dict(self, core_columns_only=...): ...
    def get_package_id(self):
        """Returns the package id for a resource. """
        ...
    @classmethod
    def get(cls, reference):
        """Returns a resource object referenced by its name or id."""
        ...
    @classmethod
    def get_columns(cls, extra_columns=...):
        """Returns the core editable columns of the resource."""
        ...
    @classmethod
    def get_extra_columns(cls): ...
    @classmethod
    def get_all_without_views(cls, formats=...):
        """Returns all resources that have no resource views

        :param formats: if given, returns only resources that have no resource
            views and are in any of the received formats
        :type formats: list

        :rtype: list of ckan.model.Resource objects
        """
        ...
    def related_packages(self): ...

def resource_identifier(obj): ...

class DictProxy(object):
    def __init__(self, target_key, target_dict, data_type=...) -> None: ...
    def __get__(self, obj, type): ...
    def __set__(self, obj, value): ...
    def __delete__(self, obj): ...
