"""
This type stub file was generated by pyright.
"""

class Enum(set):
    """Simple enumeration
    e.g. Animal = Enum("dog", "cat", "horse")
    joey = Animal.DOG
    """

    def __init__(self, *names) -> None: ...
    def __getattr__(self, name): ...

DomainObjectOperation = Enum("new", "changed", "deleted")

class DomainObject(object):
    text_search_fields = ...
    Session = ...
    def __init__(self, **kwargs) -> None: ...
    @classmethod
    def count(cls): ...
    @classmethod
    def by_name(cls, name, autoflush=..., for_update=...): ...
    @classmethod
    def text_search(cls, query, term): ...
    @classmethod
    def active(cls): ...
    def save(self): ...
    def add(self): ...
    def commit_remove(self): ...
    def commit(self): ...
    def remove(self): ...
    def delete(self): ...
    def purge(self): ...
    def as_dict(self):
        """
        returns: ordered dict with fields from table. Date/time values
        are converted to strings for json compatibilty
        """
        ...
    def from_dict(self, _dict):
        """
        Loads data from dict into table.

        Returns (changed, skipped) tuple. changed is a set of keys
        that were different than the original values, i.e. changed
        is an empty list when no values were changed by this call.
        skipped is a dict containing any items from _dict whose keys
        were not found in columns.

        When key for a column is not present in _dict, columns marked
        with doc='remove_if_not_provided' will have their field set
        to N , otherwise existing field value won't be changed.
        """
        ...
    def __lt__(self, other) -> bool: ...
    def __str__(self) -> str: ...
    def __unicode__(self): ...
    def __repr__(self): ...
