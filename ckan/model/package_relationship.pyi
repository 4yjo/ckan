"""
This type stub file was generated by pyright.
"""

from sqlalchemy import Column, ForeignKey, Table, types
from ckan.model import core, domain_object, meta, types as _types

package_relationship_table = Table('package_relationship', meta.metadata, Column('id', types.UnicodeText, primary_key=True, default=_types.make_uuid), Column('subject_package_id', types.UnicodeText, ForeignKey('package.id')), Column('object_package_id', types.UnicodeText, ForeignKey('package.id')), Column('type', types.UnicodeText), Column('comment', types.UnicodeText), Column('state', types.UnicodeText, default=core.State.ACTIVE))
class PackageRelationship(core.StatefulObjectMixin, domain_object.DomainObject):
    '''The rule with PackageRelationships is that they are stored in the model
    always as the "forward" relationship - i.e. "child_of" but never
    as "parent_of". However, the model functions provide the relationships
    from both packages in the relationship and the type is swapped from
    forward to reverse accordingly, for meaningful display to the user.'''
    types = ...
    types_printable = ...
    inferred_types_printable = ...
    def __str__(self) -> str:
        ...
    
    def __repr__(self):
        ...
    
    def as_dict(self, package=..., ref_package_by=...):
        """Returns full relationship info as a dict from the point of view
        of the given package if specified.
        e.g. {'subject':u'annakarenina',
              'type':u'depends_on',
              'object':u'warandpeace',
              'comment':u'Since 1843'}"""
        ...
    
    def as_tuple(self, package):
        '''Returns basic relationship info as a tuple from the point of view
        of the given package with the object package object.
        e.g. rel.as_tuple(warandpeace) gives (u'depends_on', annakarenina)
        meaning warandpeace depends_on annakarenina.'''
        ...
    
    @classmethod
    def by_subject(cls, package):
        ...
    
    @classmethod
    def by_object(cls, package):
        ...
    
    @classmethod
    def get_forward_types(cls):
        ...
    
    @classmethod
    def get_reverse_types(cls):
        ...
    
    @classmethod
    def get_all_types(cls):
        ...
    
    @classmethod
    def reverse_to_forward_type(cls, reverse_type):
        ...
    
    @classmethod
    def forward_to_reverse_type(cls, forward_type):
        ...
    
    @classmethod
    def reverse_type(cls, forward_or_reverse_type):
        ...
    
    @classmethod
    def make_type_printable(cls, type_):
        ...
    


