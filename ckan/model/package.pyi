"""
This type stub file was generated by pyright.
"""

import datetime
import logging
import ckan.lib.maintain as maintain
from sqlalchemy import Column, ForeignKey, Table, types
from ckan.model import core, domain_object, meta, types as _types

logger = logging.getLogger(__name__)
PACKAGE_NAME_MAX_LENGTH = 100
PACKAGE_NAME_MIN_LENGTH = 2
PACKAGE_VERSION_MAX_LENGTH = 100
package_table = Table(
    "package",
    meta.metadata,
    Column(
        "id", types.UnicodeText, primary_key=True, default=_types.make_uuid
    ),
    Column(
        "name",
        types.Unicode(PACKAGE_NAME_MAX_LENGTH),
        nullable=False,
        unique=True,
    ),
    Column("title", types.UnicodeText, doc="remove_if_not_provided"),
    Column(
        "version",
        types.Unicode(PACKAGE_VERSION_MAX_LENGTH),
        doc="remove_if_not_provided",
    ),
    Column("url", types.UnicodeText, doc="remove_if_not_provided"),
    Column("author", types.UnicodeText, doc="remove_if_not_provided"),
    Column("author_email", types.UnicodeText, doc="remove_if_not_provided"),
    Column("maintainer", types.UnicodeText, doc="remove_if_not_provided"),
    Column(
        "maintainer_email", types.UnicodeText, doc="remove_if_not_provided"
    ),
    Column("notes", types.UnicodeText, doc="remove_if_not_provided"),
    Column("license_id", types.UnicodeText, doc="remove_if_not_provided"),
    Column("type", types.UnicodeText, default=u"dataset"),
    Column("owner_org", types.UnicodeText),
    Column("creator_user_id", types.UnicodeText),
    Column(
        "metadata_created", types.DateTime, default=datetime.datetime.utcnow
    ),
    Column(
        "metadata_modified", types.DateTime, default=datetime.datetime.utcnow
    ),
    Column("private", types.Boolean, default=False),
    Column("state", types.UnicodeText, default=core.State.ACTIVE),
)
package_member_table = Table(
    "package_member",
    meta.metadata,
    Column("package_id", ForeignKey("package.id"), primary_key=True),
    Column("user_id", ForeignKey("user.id"), primary_key=True),
    Column("capacity", types.UnicodeText, nullable=False),
    Column("modified", types.DateTime, default=datetime.datetime.utcnow),
)

class Package(core.StatefulObjectMixin, domain_object.DomainObject):
    text_search_fields = ...
    def __init__(self, **kw) -> None: ...
    @classmethod
    def search_by_name(cls, text_query): ...
    @classmethod
    def get(cls, reference, for_update=...):
        """Returns a package object referenced by its id or name."""
        ...
    @property
    def resources(self): ...
    def related_packages(self): ...
    def add_resource(
        self, url, format=..., description=..., hash=..., **kw
    ): ...
    def add_tag(self, tag): ...
    def add_tags(self, tags): ...
    def add_tag_by_name(self, tag_name, vocab=..., autoflush=...):
        """Add a tag with the given name to this package's tags.

        By default the given tag_name will be searched for among the free tags
        (tags which do not belong to any vocabulary) only. If the optional
        argument `vocab` is given then the named vocab will be searched for the
        tag name instead.

        If no tag with the given name is found, one will be created. If the
        optional argument vocab is given and there is no tag with the given
        name in the given vocabulary, then a new tag will be created and added
        to the vocabulary.

        """
        ...
    def get_tags(self, vocab=...):
        """Return a sorted list of this package's tags

        Tags are sorted by their names.

        """
        ...
    def remove_tag(self, tag): ...
    def isopen(self): ...
    def get_average_rating(self): ...
    def as_dict(self, ref_package_by=..., ref_group_by=...): ...
    def add_relationship(self, type_, related_package, comment=...):
        """Creates a new relationship between this package and a
        related_package. It leaves the caller to commit the change.

        Raises KeyError if the type_ is invalid.
        """
        ...
    def get_relationships(
        self, with_package=..., type=..., active=..., direction=...
    ):
        """Returns relationships this package has.
        Keeps stored type/ordering (not from pov of self)."""
        ...
    def get_relationships_with(self, other_package, type=..., active=...): ...
    def get_relationships_printable(self):
        """Returns a list of tuples describing related packages, including
        non-direct relationships (such as siblings).
        @return: e.g. [(annakarenina, u"is a parent"), ...]
        """
        ...
    @classmethod
    def get_license_register(cls): ...
    @classmethod
    def get_license_options(cls): ...
    def get_license(self): ...
    def set_license(self, license): ...
    license = ...
    @property
    @maintain.deprecated(
        "`is_private` attriute of model.Package is "
        + "deprecated and should not be used.  Use `private`"
    )
    def is_private(self):
        """
        DEPRECATED in 2.1

        A package is private if belongs to any private groups
        """
        ...
    def is_in_group(self, group): ...
    def get_groups(self, group_type=..., capacity=...): ...
    def activity_stream_item(self, activity_type, user_id): ...
    def set_rating(self, user_or_ip, rating):
        """Record a user's rating of this package.

        The caller function is responsible for doing the commit.

        If a rating is outside the range MAX_RATING - MIN_RATING then a
        RatingValueException is raised.

        @param user_or_ip - user object or an IP address string
        """
        ...
    @property
    @maintain.deprecated()
    def extras_list(self):
        """DEPRECATED in 2.9

        Returns a list of the dataset's extras, as PackageExtra object
        NB includes deleted ones too (state='deleted')
        """
        ...

class PackageMember(domain_object.DomainObject): ...
class RatingValueException(Exception): ...
