"""
This type stub file was generated by pyright.
"""

from sqlalchemy import Column, ForeignKey, Table, types
from ckan.model import domain_object, meta, types as _types

activity_table = Table('activity', meta.metadata, Column('id', types.UnicodeText, primary_key=True, default=_types.make_uuid), Column('timestamp', types.DateTime), Column('user_id', types.UnicodeText), Column('object_id', types.UnicodeText), Column('revision_id', types.UnicodeText), Column('activity_type', types.UnicodeText), Column('data', _types.JsonDictType))
activity_detail_table = Table('activity_detail', meta.metadata, Column('id', types.UnicodeText, primary_key=True, default=_types.make_uuid), Column('activity_id', types.UnicodeText, ForeignKey('activity.id')), Column('object_id', types.UnicodeText), Column('object_type', types.UnicodeText), Column('activity_type', types.UnicodeText), Column('data', _types.JsonDictType))
class Activity(domain_object.DomainObject):
    def __init__(self, user_id, object_id, activity_type, data=...) -> None:
        ...
    
    @classmethod
    def get(cls, id):
        '''Returns an Activity object referenced by its id.'''
        ...
    


class ActivityDetail(domain_object.DomainObject):
    def __init__(self, activity_id, object_id, object_type, activity_type, data=...) -> None:
        ...
    
    @classmethod
    def by_activity_id(cls, activity_id):
        ...
    


def user_activity_list(user_id, limit, offset):
    '''Return user_id's public activity stream.

    Return a list of all activities from or about the given user, i.e. where
    the given user is the subject or object of the activity, e.g.:

    "{USER} created the dataset {DATASET}"
    "{OTHER_USER} started following {USER}"
    etc.

    '''
    ...

def package_activity_list(package_id, limit, offset, include_hidden_activity=...):
    '''Return the given dataset (package)'s public activity stream.

    Returns all activities about the given dataset, i.e. where the given
    dataset is the object of the activity, e.g.:

    "{USER} created the dataset {DATASET}"
    "{USER} updated the dataset {DATASET}"
    etc.

    '''
    ...

def group_activity_list(group_id, limit, offset, include_hidden_activity=...):
    '''Return the given group's public activity stream.

    Returns activities where the given group or one of its datasets is the
    object of the activity, e.g.:

    "{USER} updated the group {GROUP}"
    "{USER} updated the dataset {DATASET}"
    etc.

    '''
    ...

def organization_activity_list(group_id, limit, offset, include_hidden_activity=...):
    '''Return the given org's public activity stream.

    Returns activities where the given org or one of its datasets is the
    object of the activity, e.g.:

    "{USER} updated the organization {ORG}"
    "{USER} updated the dataset {DATASET}"
    etc.

    '''
    ...

def activities_from_everything_followed_by_user(user_id, limit, offset):
    '''Return activities from everything that the given user is following.

    Returns all activities where the object of the activity is anything
    (user, dataset, group...) that the given user is following.

    '''
    ...

def dashboard_activity_list(user_id, limit, offset):
    '''Return the given user's dashboard activity stream.

    Returns activities from the user's public activity stream, plus
    activities from everything that the user is following.

    This is the union of user_activity_list(user_id) and
    activities_from_everything_followed_by_user(user_id).

    '''
    ...

def recently_changed_packages_activity_list(limit, offset):
    '''Return the site-wide stream of recently changed package activities.

    This activity stream includes recent 'new package', 'changed package' and
    'deleted package' activities for the whole site.

    '''
    ...

