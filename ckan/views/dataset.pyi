"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, Iterable, Optional, Tuple, Union
import ckan.logic as logic
from flask import Blueprint
from flask.blueprints import Blueprint
from flask.views import MethodView
from flask.wrappers import Response

dataset: Blueprint

def _setup_template_variables(context:Dict, data_dict:Dict, package_type:Optional[str]=...)->None:...
def _get_pkg_template(template_type:str, package_type:Optional[str]=...)->str:...
def _get_package_type(id:str)->Optional[str]:...
def _get_search_details()->Dict:...

Params = Iterable[Tuple[str, Any]]

def url_with_params(url: str, params: Params) -> str: ...
def search_url(params: Params, package_type: str = ...) -> str: ...
def drill_down_url(alternative_url: str = ..., **by: Dict) -> str: ...
def remove_field(
    package_type: Optional[str],
    key: str,
    value: Optional[str] = ...,
    replace: Optional[str] = ...,
): ...
def search(package_type: str) -> str: ...
def resources(package_type: str, id: str) -> Union[Response, str]: ...
def read(package_type: str, id: str) -> Union[Response, str]: ...

class CreateView(MethodView):
    def post(self, package_type: str) -> Union[Response, str]: ...
    def get(
        self,
        package_type: str,
        data: Optional[Dict] = ...,
        errors: Optional[Dict] = ...,
        error_summary: Optional[Dict] = ...,
    ) -> str: ...

class EditView(MethodView):
    def post(self, package_type: str, id: str) -> Union[Response, str]: ...
    def get(
        self,
        package_type: str,
        id: str,
        data: Optional[Dict] = ...,
        errors: Optional[Dict] = ...,
        error_summary: Optional[Dict] = ...,
    ) -> Union[Response, str]: ...

class DeleteView(MethodView):
    def post(self, package_type: str, id: str) -> Response: ...
    def get(self, package_type: str, id: str) -> Union[Response, str]: ...

def follow(package_type: str, id: str) -> Response: ...
def unfollow(package_type: str, id: str) -> Response: ...
def followers(
    package_type: str, id: Optional[str] = ...
) -> Union[Response, str]: ...

class GroupView(MethodView):
    def post(self, package_type: str, id: str) -> Response: ...
    def get(self, package_type: str, id: str) -> str: ...

def activity(package_type: str, id: str) -> Union[Response, str]: ...
def changes(
    id: str, package_type: Optional[str] = ...
) -> Union[Response, str]: ...
def changes_multiple(
    package_type: Optional[str] = ...,
) -> Union[Response, str]: ...
def collaborators_read(package_type: str, id: str) -> Union[Response, str]: ...
def collaborator_delete(package_type: str, id: str, user_id) -> Response: ...

class CollaboratorEditView(MethodView):
    def post(self, package_type: str, id: str) -> Response: ...
    def get(self, package_type: str, id) -> Union[Response, str]: ...

def history(package_type: str, id: str) -> Response: ...
def register_dataset_plugin_rules(blueprint: Blueprint): ...
