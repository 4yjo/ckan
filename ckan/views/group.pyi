from typing import Dict, Optional, Union
from flask import Blueprint
from flask.views import MethodView
from flask.wrappers import Response

is_org: bool

def set_org(is_organization: bool) -> None: ...
def index(group_type: str, is_organization: bool) -> str: ...
def read(
    group_type: str,
    is_organization: bool,
    id: Optional[str] = ...,
    limit: int = ...,
) -> str: ...
def activity(
    id: str, group_type: str, is_organization: bool, offset: int = ...
) -> str: ...
def about(id: str, group_type: str, is_organization: bool) -> str: ...
def members(id: str, group_type: str, is_organization: bool) -> str: ...
def member_delete(
    id: str, group_type: str, is_organization: bool
) -> Union[Response, str]: ...
def history(id: str, group_type: str, is_organization: bool) -> Response: ...
def follow(id: str, group_type: str, is_organization: bool) -> Response: ...
def unfollow(id: str, group_type: str, is_organization: bool) -> Response: ...
def followers(id: str, group_type: str, is_organization: bool) -> str: ...
def admins(id: str, group_type: str, is_organization: bool) -> str: ...

class BulkProcessView(MethodView):
    def get(self, id: str, group_type: str, is_organization: bool) -> str: ...
    def post(
        self,
        id: str,
        group_type: str,
        is_organization: bool,
        data: Optional[Dict] = ...,
    ) -> Response: ...

class CreateGroupView(MethodView):
    def post(
        self, group_type: str, is_organization: bool
    ) -> Union[Response, str]: ...
    def get(
        self,
        group_type: str,
        is_organization: bool,
        data: Optional[Dict] = ...,
        errors: Optional[Dict] = ...,
        error_summary: Optional[Dict] = ...,
    ) -> str: ...

class EditGroupView(MethodView):
    def post(
        self, group_type: str, is_organization: bool, id: Optional[str] = ...
    ) -> Union[Response, str]: ...
    def get(
        self,
        id: str,
        group_type: str,
        is_organization: bool,
        data: Optional[Dict] = ...,
        errors: Optional[Dict] = ...,
        error_summary: Optional[Dict] = ...,
    ) -> str: ...

class DeleteGroupView(MethodView):
    def post(
        self, group_type: str, is_organization: bool, id: Optional[str] = ...
    ) -> Response: ...
    def get(
        self, group_type: str, is_organization: bool, id: bool = ...
    ) -> str: ...

class MembersGroupView(MethodView):
    def post(
        self, group_type: str, is_organization: bool, id: Optional[str] = ...
    ) -> Response: ...
    def get(
        self, group_type: str, is_organization: bool, id: Optional[str] = ...
    ) -> str: ...

group: Blueprint
organization: Blueprint

def register_group_plugin_rules(blueprint: Blueprint) -> None: ...
