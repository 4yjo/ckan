"""
This type stub file was generated by pyright.
"""

import logging
import ckan.logic as logic
import ckan.lib.plugins as lib_plugins
from flask import Blueprint
from flask.views import MethodView

NotFound = logic.NotFound
NotAuthorized = logic.NotAuthorized
ValidationError = logic.ValidationError
check_access = logic.check_access
get_action = logic.get_action
tuplize_dict = logic.tuplize_dict
clean_dict = logic.clean_dict
parse_params = logic.parse_params
log = logging.getLogger(__name__)
lookup_group_plugin = lib_plugins.lookup_group_plugin
lookup_group_controller = lib_plugins.lookup_group_controller
lookup_group_blueprint = lib_plugins.lookup_group_blueprints
is_org = False

def set_org(is_organization): ...
def index(group_type, is_organization): ...
def read(group_type, is_organization, id=..., limit=...): ...
def activity(id, group_type, is_organization, offset=...):
    u"""Render this group's public activity stream page."""
    ...

def about(id, group_type, is_organization): ...
def members(id, group_type, is_organization): ...
def member_delete(id, group_type, is_organization): ...
def history(id, group_type, is_organization): ...
def follow(id, group_type, is_organization):
    u"""Start following this group."""
    ...

def unfollow(id, group_type, is_organization):
    u"""Stop following this group."""
    ...

def followers(id, group_type, is_organization): ...
def admins(id, group_type, is_organization): ...

class BulkProcessView(MethodView):
    u""" Bulk process view"""
    def get(self, id, group_type, is_organization): ...
    def post(self, id, group_type, is_organization, data=...): ...

class CreateGroupView(MethodView):
    u"""Create group view """
    def post(self, group_type, is_organization): ...
    def get(
        self,
        group_type,
        is_organization,
        data=...,
        errors=...,
        error_summary=...,
    ): ...

class EditGroupView(MethodView):
    u""" Edit group view"""
    def post(self, group_type, is_organization, id=...): ...
    def get(
        self,
        id,
        group_type,
        is_organization,
        data=...,
        errors=...,
        error_summary=...,
    ): ...

class DeleteGroupView(MethodView):
    u"""Delete group view """
    def post(self, group_type, is_organization, id=...): ...
    def get(self, group_type, is_organization, id=...): ...

class MembersGroupView(MethodView):
    u"""New members group view"""
    def post(self, group_type, is_organization, id=...): ...
    def get(self, group_type, is_organization, id=...): ...

group = Blueprint(
    u"group",
    __name__,
    url_prefix=u"/group",
    url_defaults={u"group_type": u"group", u"is_organization": False},
)
organization = Blueprint(
    u"organization",
    __name__,
    url_prefix=u"/organization",
    url_defaults={u"group_type": u"organization", u"is_organization": True},
)

def register_group_plugin_rules(blueprint): ...
