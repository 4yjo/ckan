from typing import Any, Callable, Dict, Iterable, List, Optional, Tuple, TypeVar, Union

import click

from flask.blueprints import Blueprint
from flask.wrappers import Response
from pyutilib.component.core import Interface as _pca_Interface

import ckan.model as model

from ckan.common import CKANConfig

CKANApp = TypeVar("CKANApp")
FeedClass = TypeVar("FeedClass")
ResourceDict = TypeVar("ResourceDict", dict)
Uploader = TypeVar("Uploader")
ResourceUploader = TypeVar("ResourceUploader")

class Interface(_pca_Interface):
    @classmethod
    def implemented_by(cls, other) -> bool: ...
    @classmethod
    def provided_by(cls, instance) -> bool: ...

class IActions(Interface):
    def get_actions(self) -> Dict[str, Callable]: ...

class IApiToken(Interface):
    def add_extra_fields(self, data_dict: Dict) -> Dict: ...
    def create_api_token_schema(self, schema: Dict) -> Dict: ...
    def decode_api_token(self, encoded: str, **kwargs) -> Optional[Dict]: ...
    def encode_api_token(self, data, **kwargs) -> Optional[str]: ...
    def postprocess_api_token(
        self, data: Dict, jti: str, data_dict: Dict
    ) -> Dict: ...
    def preprocess_api_token(self, data: Dict) -> Dict: ...

class IAuthFunctions(Interface):
    def get_auth_functions(self) -> Dict[str, Callable]: ...

class IAuthenticator(Interface):
    def abort(
        self, status_code: int, detail: str, headers: Dict, comment: str
    ) -> Tuple[int, str, Dict, str]: ...
    def identify(self) -> None: ...
    def login(self) -> Optional[Response]: ...
    def logout(self) -> Optional[Response]: ...

class IBlueprint(Interface):
    def get_blueprint(self) -> Union[List[Blueprint] | Blueprint]: ...

class IClick(Interface):
    def get_commands(self) -> List[click.Command]: ...

class IConfigurable(Interface):
    def configure(self, config: CKANConfig) -> None: ...

class IConfigurer(Interface):
    def update_config(self, config: CKANConfig) -> None: ...
    def update_config_schema(self, schema: Dict) -> Dict: ...

class IDatasetForm(Interface):
    def create_package_schema(self) -> Dict: ...
    def edit_template(self, package_type: str) -> str: ...
    def history_template(self, package_type: str) -> str: ...
    def is_fallback(self) -> bool: ...
    def new_template(self, package_type: str) -> str: ...
    def package_form(self, package_type: str) -> str: ...
    def package_types(self) -> Iterable[str]: ...
    def prepare_dataset_blueprint(
        self, package_type: str, blueprint: Blueprint
    ) -> Blueprint: ...
    def prepare_resource_blueprint(
        self, package_type: str, blueprint: Blueprint
    ) -> Blueprint: ...
    def read_template(self, package_type: str) -> str: ...
    def resource_form(self, package_type: str) -> str: ...
    def resource_template(self, package_type: str) -> str: ...
    def search_template(self, package_type: str) -> str: ...
    def setup_template_variables(
        self, context: Dict, data_dict: Dict
    ) -> None: ...
    def show_package_schema(self) -> Dict: ...
    def update_package_schema(self) -> Dict: ...
    def validate(
        self, context: Dict, data_dict: Dict, schema: Dict, action: str
    ) -> Tuple[Dict, Dict]: ...

class IDomainObjectModification(Interface):
    def notify(self, entity, operation: str) -> None: ...

class IFacets(Interface):
    def dataset_facets(self, facets_dict: Dict, package_type: str) -> Dict: ...
    def group_facets(
        self, facets_dict: Dict, group_type: str, package_type: str
    ) -> Dict: ...
    def organization_facets(
        self, facets_dict: Dict, organization_type: str, package_type: str
    ) -> Dict: ...

class IFeed(Interface):
    def get_feed_class(self) -> FeedClass: ...
    def get_item_additional_fields(self, dataset_dict: Dict) -> None: ...

class IForkObserver(Interface):
    def before_fork(self) -> None: ...

class IGroupController(Interface):
    def before_view(self, pkg_dict: Dict) -> Dict: ...
    def create(self, entity: model.Group) -> None: ...
    def delete(self, entity: model.Group) -> None: ...
    def edit(self, entity: model.Group) -> None: ...
    def read(self, entity: model.Group) -> None: ...

class IGroupForm(Interface):
    def check_data_dict(self, data_dict: Dict) -> None: ...
    def db_to_form_schema(self) -> None: ...
    def edit_template(self, group_type: str) -> str: ...
    def form_to_db_schema(self) -> Dict: ...
    def group_controller(self) -> str: ...
    def group_form(self, group_type: str) -> str: ...
    def group_types(self) -> Iterable[str]: ...
    def history_template(self, group_type: str) -> str: ...
    def index_template(self, group_type: str) -> str: ...
    def is_fallback(self) -> bool: ...
    def new_template(self, group_type: str) -> str: ...
    def prepare_group_blueprint(
        self, group_type: str, blueprint: Blueprint
    ) -> Blueprint: ...
    def read_template(self, group_type: str) -> str: ...
    def setup_template_variables(
        self, context: Dict, data_dict: Dict
    ) -> None: ...
    def validate(
        self, context: Dict, data_dict: Dict, schema: Dict, action: str
    ) -> Tuple[Dict, Dict]: ...

class IMapper(Interface):
    def after_delete(self, mapper, connection, instance) -> None: ...
    def after_insert(self, mapper, connection, instance) -> None: ...
    def after_update(self, mapper, connection, instance) -> None: ...
    def before_delete(self, mapper, connection, instance) -> None: ...
    def before_insert(self, mapper, connection, instance) -> None: ...
    def before_update(self, mapper, connection, instance) -> None: ...

class IMiddleware(Interface):
    def make_error_log_middleware(
        self, app: CKANApp, config: CKANConfig
    ) -> CKANApp: ...
    def make_middleware(self, app: CKANApp, config: CKANConfig) -> CKANApp: ...

class IOrganizationController(Interface):
    def before_view(self, data_dict: Dict) -> Dict: ...
    def create(self, entity: model.Group) -> None: ...
    def delete(self, entity: model.Group) -> None: ...
    def edit(self, entity: model.Group) -> None: ...
    def read(self, entity: model.Group) -> None: ...

class IPackageController(Interface):
    def after_create(self, context: Dict, pkg_dict: Dict) -> None: ...
    def after_delete(self, context: Dict, pkg_dict: Dict) -> None: ...
    def after_search(
        self, search_results: Dict, search_params: Dict
    ) -> Dict: ...
    def after_show(self, context: Dict, pkg_dict: Dict) -> None: ...
    def after_update(self, context: Dict, pkg_dict: Dict) -> None: ...
    def before_index(self, pkg_dict: Dict) -> Dict: ...
    def before_search(self, search_params: Dict) -> Dict: ...
    def before_view(self, pkg_dict: Dict) -> Dict: ...
    def create(self, entity: model.Package) -> None: ...
    def delete(self, entity: model.Package) -> None: ...
    def edit(self, entity: model.Package) -> None: ...
    def read(self, entity: model.Package) -> None: ...

class IPermissionLabels(Interface):
    def get_dataset_labels(self, dataset_obj: model.Package) -> List[str]: ...
    def get_user_dataset_labels(
        self, user_obj: Optional[model.User]
    ) -> List[str]: ...

class IPluginObserver(Interface):
    def after_load(self, service) -> None: ...
    def after_unload(self, service) -> None: ...
    def before_load(self, plugin) -> None: ...
    def before_unload(self, plugin) -> None: ...

class IResourceController(Interface):
    def after_create(self, context: Dict, resource: Dict) -> None: ...
    def after_delete(self, context: Dict, resources: List[Dict]) -> None: ...
    def after_update(self, context: Dict, resource: Dict) -> None: ...
    def before_create(self, context: Dict, resource: Dict) -> None: ...
    def before_delete(
        self, context: Dict, resource, resources: List[Dict]
    ) -> None: ...
    def before_show(self, resource_dict: Dict) -> Dict: ...
    def before_update(
        self, context: Dict, current: Dict, resource: Dict
    ) -> None: ...

class IResourceUrlChange(Interface):
    def notify(self, resource: ResourceDict) -> None: ...

class IResourceView(Interface):
    def can_view(self, data_dict: Dict) -> bool: ...
    def form_template(self, context: Dict, data_dict: Dict) -> str: ...
    def info(self) -> Dict: ...
    def setup_template_variables(
        self, context: Dict, data_dict: Dict
    ) -> Dict: ...
    def view_template(self, context: Dict, data_dict: Dict) -> str: ...

class ISession(Interface):
    def after_begin(self, session, transaction, connection) -> None: ...
    def after_commit(self, session) -> None: ...
    def after_flush(self, session, flush_context) -> None: ...
    def after_rollback(self, session) -> None: ...
    def before_commit(self, session) -> None: ...
    def before_flush(self, session, flush_context, instances) -> None: ...

class ITagController(Interface):
    def before_view(self, tag_dict: Dict) -> Dict: ...

class ITemplateHelpers(Interface):
    def get_helpers(self) -> Dict[str, Callable]: ...

class ITranslation(Interface):
    def i18n_directory(self) -> str: ...
    def i18n_domain(self) -> str: ...
    def i18n_locales(self) -> List[str]: ...

class IUploader(Interface):
    def get_resource_uploader(self) -> ResourceUploader: ...
    def get_uploader(self, upload_to: str, old_filename: str) -> Uploader: ...

class IValidators(Interface):
    def get_validators(self) -> Dict[str, Callable]: ...
