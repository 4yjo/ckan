"""
This type stub file was generated by pyright.
"""

import logging
from pylons.wsgiapp import PylonsApp
from paste.fileapp import _FileIter

log = logging.getLogger(__name__)

def make_pylons_stack(conf, full_stack=..., static_files=..., **app_conf):
    """Create a Pylons WSGI application and return it

    ``conf``
        The inherited configuration for this application. Normally from
        the [DEFAULT] section of the Paste ini file.

    ``full_stack``
        Whether this application provides a full WSGI stack (by default,
        meaning it handles its own exceptions and errors). Disable
        full_stack when this application is "managed" by another WSGI
        middleware.

    ``static_files``
        Whether this application serves its own static files; disable
        when another web server is responsible for serving them.

    ``app_conf``
        The application's local configuration. Normally specified in
        the [app:<name>] section of the Paste ini file (where <name>
        defaults to main).

    """
    ...

class CKANPylonsApp(PylonsApp):
    app_name = ...
    def can_handle_request(self, environ):
        """
        Decides whether it can handle a request with the Pylons app by
        matching the request environ against the route mapper

        Returns (True, 'pylons_app', origin) if this is the case.

        origin can be either 'core' or 'extension' depending on where
        the route was defined.

        NOTE: There is currently a catch all route for GET requests to
        point arbitrary urls to templates with the same name:

            map.connect('/*url', controller='template', action='view')

        This means that this function will match all GET requests. This
        does not cause issues as the Pylons core routes are the last to
        take precedence so the current behaviour is kept, but it's worth
        keeping in mind.
        """
        ...

class CloseCallbackWrapper(object):
    def __init__(self, iterable, callback, environ) -> None: ...
    def __iter__(self):
        """
        return a generator that passes through items from iterable
        then calls callback(environ).
        """
        ...

class FileIterWrapper(CloseCallbackWrapper, _FileIter):
    """Same CloseCallbackWrapper, just with _FileIter mixin.

    That will prevent pylons from converting file responses into
    in-memori lists.
    """

    ...

def execute_on_completion(application, config, callback):
    """
    Call callback(environ) once complete response is sent
    """
    ...

def cleanup_pylons_response_string(environ): ...
