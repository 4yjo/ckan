"""
This type stub file was generated by pyright.
"""

import logging
from flask.ctx import _AppCtxGlobals
from flask.sessions import SessionInterface
from flask_multistatic import MultiStaticFlask
from werkzeug.routing import Rule
from flask_babel import Babel

log = logging.getLogger(__name__)

class I18nMiddleware(object):
    def __init__(self, app) -> None: ...
    def __call__(self, environ, start_response): ...

class CKANBabel(Babel):
    def __init__(self, *pargs, **kwargs) -> None: ...
    @property
    def domain(self): ...
    @property
    def translation_directories(self): ...

def make_flask_stack(conf):
    """This has to pass the flask app through all the same middleware that
    Pylons used"""
    class BeakerSessionInterface(SessionInterface): ...

def get_locale():
    u"""
    Return the value of the `CKAN_LANG` key of the WSGI environ,
    set by the I18nMiddleware based on the URL.
    If no value is defined, it defaults to `ckan.locale_default` or `en`.
    """
    ...

def ckan_before_request():
    u"""
    Common handler executed before all Flask requests

    If a response is returned by any of the functions called (
    currently ``identify_user()` only) any further processing of the
    request will be stopped and that response will be returned.

    """
    ...

def ckan_after_request(response):
    u"""Common handler executed after all Flask requests"""
    ...

def helper_functions():
    u"""Make helper functions (`h`) available to Flask templates"""
    ...

def c_object():
    u"""
    Expose `c` as an alias of `g` in templates for backwards compatibility
    """
    ...

class CKAN_Rule(Rule):
    u"""Custom Flask url_rule_class.

    We use it to be able to flag routes defined in extensions as such
    """
    def __init__(self, *args, **kwargs) -> None: ...

class CKAN_AppCtxGlobals(_AppCtxGlobals):
    """Custom Flask AppCtxGlobal class (flask.g)."""

    def __getattr__(self, name):
        """
        If flask.g doesn't have attribute `name`, fall back to CKAN's
        app_globals object.
        If the key is also not found in there, an AttributeError will be raised
        """
        ...

class CKANFlask(MultiStaticFlask):
    """Extend the Flask class with a special method called on incoming
    requests by AskAppDispatcherMiddleware.
    """

    app_name = ...
    def can_handle_request(self, environ):
        """
        Decides whether it can handle a request with the Flask app by
        matching the request environ against the route mapper

        Returns (True, 'flask_app', origin) if this is the case.

        `origin` can be either 'core' or 'extension' depending on where
        the route was defined.
        """
        ...
    def register_extension_blueprint(self, blueprint, **kwargs):
        """
        This method should be used to register blueprints that come from
        extensions, so there's an opportunity to add extension-specific
        options.

        Sets the rule property `ckan_core` to False, to indicate that the rule
        applies to an extension route.
        """
        ...
