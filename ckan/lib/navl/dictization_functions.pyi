import json

class Missing(object):
    def __unicode__(self): ...
    def __str__(self) -> str: ...
    def __int__(self) -> int: ...
    def __complex__(self): ...
    def __long__(self): ...
    def __float__(self): ...
    def __oct__(self): ...
    def __hex__(self): ...
    def __len__(self): ...

missing = Missing()

class State(object): ...

class DictizationError(Exception):
    def __str__(self) -> str: ...
    def __unicode__(self): ...
    def __repr__(self): ...

class Invalid(DictizationError):
    def __init__(self, error, key=...) -> None: ...

class DataError(DictizationError):
    def __init__(self, error) -> None: ...

class StopOnError(DictizationError): ...

def flattened_order_key(key): ...
def flatten_schema(schema, flattened=..., key=...): ...
def get_all_key_combinations(data, flattened_schema): ...
def make_full_schema(data, schema): ...
def augment_data(data, schema): ...
def convert(converter, key, converted_data, errors, context): ...
def validate(data, schema, context=...): ...
def flatten_list(data, flattened=..., old_key=...): ...
def flatten_dict(data, flattened=..., old_key=...): ...
def unflatten(data): ...

class MissingNullEncoder(json.JSONEncoder):
    def default(self, obj): ...

def check_dict(data_dict, select_dict, parent_path=...): ...
def check_list(data_list, select_list, parent_path=...): ...
def resolve_string_key(data, string_key): ...
def check_string_key(data_dict, string_key, value): ...
def filter_glob_match(data_dict, glob_patterns): ...
def update_merge_dict(data_dict, update_dict, parent_path=...): ...
def update_merge_list(data_list, update_list, parent_path=...): ...
def update_merge_string_key(data_dict, string_key, value): ...
