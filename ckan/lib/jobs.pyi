"""
This type stub file was generated by pyright.
"""

import logging
import rq

u"""
Asynchronous background jobs.

Note that most job management functions are not available from this
module but via the various ``job_*`` API functions.

Internally, RQ queue names are prefixed with a string containing the
CKAN site ID to avoid key collisions when the same Redis database is
used for multiple CKAN instances. The functions of this module expect
unprefixed queue names (e.g. ``'default'``) unless noted otherwise. The
raw RQ objects (e.g. a queue returned by ``get_queue``) use the full,
prefixed names. Use the functions ``add_queue_name_prefix`` and
``remove_queue_name_prefix`` to manage queue name prefixes.

.. versionadded:: 2.7
"""
log = logging.getLogger(__name__)
DEFAULT_QUEUE_NAME = u"default"
DEFAULT_JOB_TIMEOUT = 180
_queues = {}

def add_queue_name_prefix(name):
    u"""
    Prefix a queue name.

    .. seealso:: :py:func:`remove_queue_name_prefix`
    """
    ...

def remove_queue_name_prefix(name):
    u"""
    Remove a queue name's prefix.

    :raises ValueError: if the given name is not prefixed.

    .. seealso:: :py:func:`add_queue_name_prefix`
    """
    ...

def get_all_queues():
    u"""
    Return all job queues currently in use.

    :returns: The queues.
    :rtype: List of ``rq.queue.Queue`` instances

    .. seealso:: :py:func:`get_queue`
    """
    ...

def get_queue(name=...):
    u"""
    Get a job queue.

    The job queue is initialized if that hasn't happened before.

    :param string name: The name of the queue. If not given then the
        default queue is returned.

    :returns: The job queue.
    :rtype: ``rq.queue.Queue``

    .. seealso:: :py:func:`get_all_queues`
    """
    ...

def enqueue(fn, args=..., kwargs=..., title=..., queue=..., rq_kwargs=...):
    u"""
    Enqueue a job to be run in the background.

    :param function fn: Function to be executed in the background

    :param list args: List of arguments to be passed to the function.
        Pass an empty list if there are no arguments (default).

    :param dict kwargs: Dict of keyword arguments to be passed to the
        function. Pass an empty dict if there are no keyword arguments
        (default).

    :param string title: Optional human-readable title of the job.

    :param string queue: Name of the queue. If not given then the
        default queue is used.

    :param dict rq_kwargs: Dict of keyword arguments that will get passed
        to the RQ ``enqueue_call`` invocation (eg ``timeout``, ``depends_on``,
        ``ttl`` etc).

    :returns: The enqueued job.
    :rtype: ``rq.job.Job``
    """
    ...

def job_from_id(id):
    u"""
    Look up an enqueued job by its ID.

    :param string id: The ID of the job.

    :returns: The job.
    :rtype: ``rq.job.Job``

    :raises KeyError: if no job with that ID exists.
    """
    ...

def dictize_job(job):
    u"""Convert a job to a dict.

    In contrast to ``rq.job.Job.to_dict`` this function includes only
    the attributes that are relevant to our use case and promotes the
    meta attributes that we use (e.g. ``title``).

    :param rq.job.Job job: The job to dictize.

    :returns: The dictized job.
    :rtype: dict
    """
    ...

def test_job(*args):
    u"""Test job.

    A test job for debugging purposes. Prints out any arguments it
    receives. Can be scheduled via ``paster jobs test``.
    """
    ...

class Worker(rq.Worker):
    u"""
    CKAN-specific worker.

    Note that starting an instance of this class (via the ``work``
    method) disposes the currently active database engine and the
    associated session. This is necessary to prevent their corruption by
    the forked worker process. Both the engine and the session
    automatically re-initialize afterwards once they are used. However,
    non-committed changes are rolled back and instance variables bound
    to the old session have to be re-fetched from the database.
    """
    def __init__(self, queues=..., *args, **kwargs) -> None:
        u"""
        Constructor.

        Accepts the same arguments as the constructor of
        ``rq.worker.Worker``. However, the behavior of the ``queues``
        parameter is different.

        :param queues: The job queue(s) to listen on. Can be a string
            with the name of a single queue or a list of queue names.
            If not given then the default queue is used.
        """
        ...
    def register_birth(self, *args, **kwargs): ...
    def execute_job(self, job, *args, **kwargs): ...
    def register_death(self, *args, **kwargs): ...
    def handle_exception(self, job, *exc_info): ...
    def main_work_horse(self, job, queue): ...
    def perform_job(self, *args, **kwargs): ...
