from typing import Any, Callable, Dict, Iterable, List, NoReturn, Optional
import rq
from rq.job import Job

DEFAULT_QUEUE_NAME: str
DEFAULT_JOB_TIMEOUT: int

def add_queue_name_prefix(name: str) -> str: ...
def remove_queue_name_prefix(name: str) -> str: ...
def get_all_queues() -> List[rq.Queue]: ...
def get_queue(name: str = ...) -> rq.Queue: ...
def enqueue(
    fn: Callable,
    args: Optional[Iterable] = ...,
    kwargs: Optional[Dict] = ...,
    title: Optional[str] = ...,
    queue: str = ...,
    rq_kwargs: Optional[Dict] = ...,
) -> Job: ...
def job_from_id(id: str) -> Job: ...
def dictize_job(job: Job) -> Dict: ...
def test_job(*args: Any) -> None: ...

class Worker(rq.Worker):
    def __init__(
        self, queues: List[str] = ..., *args: Any, **kwargs: Any
    ) -> None: ...
    def register_birth(self, *args, **kwargs) -> None: ...
    def execute_job(self, job, *args, **kwargs) -> None: ...
    def register_death(self, *args, **kwargs) -> None: ...
    def handle_exception(self, job, *exc_info) -> None: ...
    def main_work_horse(self, job, queue) -> NoReturn: ...
    def perform_job(self, *args, **kwargs) -> bool: ...
