from typing import Dict, Optional, Tuple, Union
from typing_extensions import Protocol
from werkzeug.datastructures import FileStorage as FlaskFileStorage

ALLOWED_UPLOAD_TYPES: Tuple
MB: int

class UploadProtocol(Protocol):
    def __init__(
        self, object_type: str, old_filename: Optional[str] = ...
    ) -> None: ...
    def update_data_dict(
        self,
        data_dict: Dict,
        url_field: str,
        file_field: str,
        clear_field: str,
    ) -> None: ...
    def upload(self, max_size: int = ...) -> None: ...

class ResourceUploadProtocol(Protocol):
    def __init__(self, resource: Dict) -> None: ...
    def get_directory(self, id: str) -> str: ...
    def get_path(self, id: str) -> str: ...
    def upload(self, id: str, max_size: int = ...) -> None: ...

def get_uploader(
    upload_to: str, old_filename: Optional[str] = ...
) -> UploadProtocol: ...
def get_resource_uploader(data_dict: Dict) -> ResourceUploadProtocol: ...
def get_storage_path() -> Union[str, bool]: ...
def get_max_image_size() -> int: ...
def get_max_resource_size() -> int: ...

class Upload(object):
    def __init__(
        self, object_type: str, old_filename: Optional[str] = ...
    ) -> None: ...
    def update_data_dict(
        self,
        data_dict: Dict,
        url_field: str,
        file_field: str,
        clear_field: str,
    ) -> None: ...
    def upload(self, max_size: int = ...) -> None: ...

class ResourceUpload(object):
    def __init__(self, resource: Dict) -> None: ...
    def get_directory(self, id: str) -> str: ...
    def get_path(self, id: str) -> str: ...
    def upload(self, id: str, max_size: int = ...) -> None: ...
