"""
This type stub file was generated by pyright.
"""

import logging

log = logging.getLogger(__name__)
_package_plugins = {  }
_default_package_plugin = None
_group_plugins = {  }
_default_group_plugin = None
_default_organization_plugin = None
_group_controllers = {  }
_group_blueprints = {  }
def reset_package_plugins():
    ...

def reset_group_plugins():
    ...

def lookup_package_plugin(package_type=...):
    """
    Returns the plugin controller associoated with the given package type.

    If the package type is None or cannot be found in the mapping, then the
    fallback behaviour is used.

    """
    ...

def lookup_group_plugin(group_type=...):
    """
    Returns the form plugin associated with the given group type.

    If the group type is None or cannot be found in the mapping, then the
    fallback behaviour is used.
    """
    ...

def lookup_group_controller(group_type=...):
    """
    Returns the group controller associated with the given group type. The
    controller is expressed as a string that you'd pass to url_to(controller=x)
    """
    ...

def lookup_group_blueprints(group_type=...):
    """
    Returns the group blueprint
    """
    ...

def register_package_plugins():
    """
    Register the various IDatasetForm instances.

    This method will setup the mappings between package types and the
    registered IDatasetForm instances.
    """
    ...

def register_package_blueprints(app):
    """
    Register a Flask blueprint for the various IDatasetForm instances.

    Actually two blueprints per IDatasetForm instance, one for the dataset routes
    and one for the resources one.
    """
    ...

def set_default_package_plugin():
    ...

def register_group_plugins():
    """
    Register the various IGroupForm instances.

    This method will setup the mappings between group types and the
    registered IGroupForm instances.

    It will register IGroupForm instances for both groups and organizations
    """
    ...

def register_group_blueprints(app):
    """
    Register a Flask blueprint for the various IGroupForm instances.

    It will register blueprints for both groups and organizations
    """
    ...

def set_default_group_plugin():
    ...

def plugin_validate(plugin, context, data_dict, schema, action):
    """
    Backwards compatibility with 2.x dataset group and org plugins:
    return a default validate method if one has not been provided.
    """
    ...

def get_permission_labels():
    '''Return the permission label plugin (or default implementation)'''
    ...

class DefaultDatasetForm(object):
    '''The default implementation of
    :py:class:`~ckan.plugins.interfaces.IDatasetForm`.

    This class serves two purposes:

    1. It provides a base class for plugin classes that implement
       :py:class:`~ckan.plugins.interfaces.IDatasetForm` to inherit from, so
       they can inherit the default behavior and just modify the bits they
       need to.

    2. It is used as the default fallback plugin when no registered
       :py:class:`~ckan.plugins.interfaces.IDatasetForm` plugin handles the
       given dataset type and no other plugin has registered itself as the
       fallback plugin.

    .. note::

       :py:class:`~ckan.plugins.toolkit.DefaultDatasetForm` doesn't call
       :py:func:`~ckan.plugins.core.implements`, because we don't want it
       being registered.

    '''
    def create_package_schema(self):
        ...
    
    def update_package_schema(self):
        ...
    
    def show_package_schema(self):
        ...
    
    def setup_template_variables(self, context, data_dict):
        ...
    
    def new_template(self):
        ...
    
    def read_template(self):
        ...
    
    def edit_template(self):
        ...
    
    def search_template(self):
        ...
    
    def history_template(self):
        ...
    
    def resource_template(self):
        ...
    
    def package_form(self):
        ...
    
    def resource_form(self):
        ...
    


class DefaultGroupForm(object):
    """
    Provides a default implementation of the pluggable Group controller
    behaviour.

    This class has 2 purposes:

     - it provides a base class for IGroupForm implementations to use if
       only a subset of the method hooks need to be customised.

     - it provides the fallback behaviour if no plugin is setup to
       provide the fallback behaviour.

    Note - this isn't a plugin implementation. This is deliberate, as we
           don't want this being registered.
    """
    def group_controller(self):
        ...
    
    def new_template(self):
        """
        Returns a string representing the location of the template to be
        rendered for the 'new' page
        """
        ...
    
    def index_template(self):
        """
        Returns a string representing the location of the template to be
        rendered for the index page
        """
        ...
    
    def read_template(self):
        """
        Returns a string representing the location of the template to be
        rendered for the read page
        """
        ...
    
    def about_template(self):
        """
        Returns a string representing the location of the template to be
        rendered for the about page
        """
        ...
    
    def edit_template(self):
        """
        Returns a string representing the location of the template to be
        rendered for the edit page
        """
        ...
    
    def activity_template(self):
        """
        Returns a string representing the location of the template to be
        rendered for the activity stream page
        """
        ...
    
    def admins_template(self):
        """
        Returns a string representing the location of the template to be
        rendered for the admins page
        """
        ...
    
    def bulk_process_template(self):
        """
        Returns a string representing the location of the template to be
        rendered for the bulk_process page
        """
        ...
    
    def group_form(self):
        ...
    
    def form_to_db_schema_options(self, options):
        ''' This allows us to select different schemas for different
        purpose eg via the web interface or via the api or creation vs
        updating. It is optional and if not available form_to_db_schema
        should be used.
        If a context is provided, and it contains a schema, it will be
        returned.
        '''
        ...
    
    def form_to_db_schema_api_create(self):
        ...
    
    def form_to_db_schema_api_update(self):
        ...
    
    def form_to_db_schema(self):
        ...
    
    def db_to_form_schema(self):
        '''This is an interface to manipulate data from the database
        into a format suitable for the form (optional)'''
        ...
    
    def db_to_form_schema_options(self, options):
        '''This allows the selection of different schemas for different
        purposes.  It is optional and if not available, ``db_to_form_schema``
        should be used.
        If a context is provided, and it contains a schema, it will be
        returned.
        '''
        ...
    
    def check_data_dict(self, data_dict):
        '''Check if the return data is correct, mostly for checking out
        if spammers are submitting only part of the form

        # Resources might not exist yet (eg. Add Dataset)
        surplus_keys_schema = ['__extras', '__junk', 'state', 'groups',
                               'extras_validation', 'save', 'return_to',
                               'resources']

        schema_keys = form_to_db_package_schema().keys()
        keys_in_schema = set(schema_keys) - set(surplus_keys_schema)

        missing_keys = keys_in_schema - set(data_dict.keys())

        if missing_keys:
            #print data_dict
            #print missing_keys
            log.info('incorrect form fields posted')
            raise DataError(data_dict)
        '''
        ...
    
    def setup_template_variables(self, context, data_dict):
        ...
    


class DefaultOrganizationForm(DefaultGroupForm):
    def group_controller(self):
        ...
    
    def group_form(self):
        ...
    
    def setup_template_variables(self, context, data_dict):
        ...
    
    def new_template(self):
        ...
    
    def about_template(self):
        ...
    
    def index_template(self):
        ...
    
    def admins_template(self):
        ...
    
    def bulk_process_template(self):
        ...
    
    def read_template(self):
        ...
    
    def edit_template(self):
        ...
    
    def activity_template(self):
        ...
    


class DefaultTranslation(object):
    def i18n_directory(self):
        '''Change the directory of the *.mo translation files

        The default implementation assumes the plugin is
        ckanext/myplugin/plugin.py and the translations are stored in
        i18n/
        '''
        ...
    
    def i18n_locales(self):
        '''Change the list of locales that this plugin handles

        By default the will assume any directory in subdirectory in the
        directory defined by self.directory() is a locale handled by this
        plugin
        '''
        ...
    
    def i18n_domain(self):
        '''Change the gettext domain handled by this plugin

        This implementation assumes the gettext domain is
        ckanext-{extension name}, hence your pot, po and mo files should be
        named ckanext-{extension name}.mo'''
        ...
    


class DefaultPermissionLabels(object):
    u'''
    Default permissions for package_search/package_show:
    - everyone can read public datasets "public"
    - users can read their own drafts "creator-(user id)"
    - users can read datasets belonging to their orgs "member-(org id)"
    - users can read datasets where they are collaborators "collaborator-(dataset id)"
    '''
    def get_dataset_labels(self, dataset_obj):
        ...
    
    def get_user_dataset_labels(self, user_obj):
        ...
    


