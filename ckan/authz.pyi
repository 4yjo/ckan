from collections import OrderedDict
from typing import (
    Callable,
    Dict,
    KeysView,
    List,
    Optional,
    Tuple,
    TypedDict,
    Union,
)

class AuthResult(TypedDict):
    success: bool

class AuthFunctions:
    def clear(self) -> None: ...
    def keys(self) -> KeysView: ...
    def get(self, function: str) -> Optional[Callable]: ...

def clear_auth_functions_cache() -> None: ...
def auth_functions_list() -> KeysView: ...
def is_sysadmin(username: str) -> Optional[bool]: ...
def get_group_or_org_admin_ids(group_id: Optional[str]) -> List[str]: ...
def is_authorized_boolean(
    action: str, context: Dict, data_dict: Optional[Dict]
) -> bool: ...
def is_authorized(
    action: str, context: Dict, data_dict: Optional[Dict]
) -> AuthResult: ...

ROLE_PERMISSIONS = OrderedDict(
    [
        ("admin", ["admin", "membership"]),
        (
            "editor",
            [
                "read",
                "delete_dataset",
                "create_dataset",
                "update_dataset",
                "manage_group",
            ],
        ),
        ("member", ["read", "manage_group"]),
    ]
)

def get_collaborator_capacities() -> Tuple[str]: ...
def trans_role(role: str) -> str: ...
def roles_list() -> List[Dict]: ...
def roles_trans() -> Dict[str, str]: ...
def get_roles_with_permission(permission: str) -> List[str]: ...
def has_user_permission_for_group_or_org(
    group_id: str, user_name: str, permission: str
) -> bool: ...
def users_role_for_group_or_org(
    group_id: str, user_name: str
) -> Optional[str]: ...
def has_user_permission_for_some_org(
    user_name: str, permission: str
) -> bool: ...
def get_user_id_for_username(
    user_name: str, allow_none: bool
) -> Optional[str]: ...
def can_manage_collaborators(package_id: str, user_id: str) -> bool: ...
def user_is_collaborator_on_dataset(
    user_id: str, dataset_id: str, capacity: Optional[Union[str, List[str]]]
) -> bool: ...

CONFIG_PERMISSIONS_DEFAULTS = Dict[str, Union[str, bool]]

def check_config_permission(permission: str) -> Union[str, bool]: ...
def auth_is_registered_user() -> bool: ...
def auth_is_loggedin_user() -> bool: ...
def auth_is_anon_user(context: Dict) -> bool: ...
